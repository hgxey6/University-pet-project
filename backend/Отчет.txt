Проект начало.

#1 Проектирование

Нужно сделать первый шаг и подумать, что должен уметь наш проект.
Наша программа должна уметь находить людей по базе данных.
Опыт моей небольшой прошлой работы показывает, что нужно сначала создать
базу данных.

Мы создаем базу данных с помощью субд postgresql, так как он надежный и дешевый в реальном проекте,
чем MSSQL, MYSQL и т.д

Создаем базу данных под названием find_project, тут будут все наши таблицы.

Теперь нам подумать, как мы будем искать человека. Для начала нам нужно хоть что то знать
о нем. Поэтому, давайте создадим класс Person.

Person будет по началу максимально простым: создадим уникальный ID, имя и фамилия. По сути, этого
хватит чтобы найти человека. Ведь когда мы ищем кого то, мы должны знать хотя бы один из этих параметров.

Теперь нам нужно создать таблицу Person. Структура состоит из геттеров, сеттеров и метод toString.

Далее таблица

DROP TABLE IF EXISTS person;  Удаляет таблицу, если ранее была создана

CREATE TABLE person  Создание таблицы
(
   person_id SERIAL NOT NULL PRIMARY KEY,   Serial - это специальная величина, где нам не нужно
   контролировать id, ведь оно само будет расти. Primary Key означает по сути уникальный id.

   person_name VARCHAR(200) NOT NULL, - Тут все понятно
   person_surname VARCHAR(200) NOT NULL
);

INSERT INTO person(person_name, person_surname) VALUES - таблица, в которую мы должны ставить
('John', 'Smith'), - тут имена
('Martin', 'MacFly'),
('Bob', 'Gar');

Вот таким получилась наша таблица.

Далее нам нужно подключиться к БД.
Для этого существует термин DAO - DATA ACCESS OBJECT.

Чтобы подключиться к БД, нам нужен driver manager postgres. Чтобы подсоединить этот драйвер,
гуглим repo jdbc postgres maven. Заходим в первый сайт и копирует в pom.xml.

Как только мы подключили к проекту jdbc, нам нужно создать сам DAO. Для начала создадим интерфейс.

List<Person> findPerson(String pattern) throws SQLException

Что такое throws SQLException? Это предупреждение, что может случиться что то с программой.
В java существует термин Exception. Exception возникает, когда может какое то исключение.
Например Наша цель - пойти в магазин. Допустим нас сбила машина, мы не дошли магазина. Так и случается
в программах. Иногда нашу программу может сбить машина, и мы должны решить, что программа должна делать,\
если ее сбила машина. Ради таких исключении в джава создали механизм try-catch.

Создаем ConnectionBuilder. Каждый dao класс должен коннектится к БД. По этому, было бы разумно
создать отдельный класс, который умеет подключаться к БД. Создаем файл properties, где будет наш логин
и пароль от Postgres

Connection con = DriverManager.getConnection(    // Создаем подключение и подключаемся через jdbc
               Config.getProperty(Config.DB_URL),  // Вызываем url и проверяем
               Config.getProperty(Config.DB_LOGIN), // Вызываем логин
               Config.getProperty(Config.DB_PASSWORD)); // и пароль

Создаем PersonDaoImpl
private Connection getConnection() throws SQLException { // Получаем подключение, если все ок возвращаем
       return ConnectionBuilder.getConnection(); // Если не ок ловим исключение
   }

Далее обрабатываем подключение. Объяснять очень очень долго, по этому оставлю код
try (Connection con = getConnection();
    PreparedStatement stmt = con.prepareStatement(GET_PERSON)) {

           stmt.setString(1, "%" + pattern + "%");
           ResultSet rs = stmt.executeQuery();
           while (rs.next()) {
               Person str = new Person(
                       rs.getLong("person_id"),
                       rs.getString("person_name"),
                       rs.getString("person_surname"));
               result.add(str);
           }
       } catch (SQLException ex) {
           ex.printStackTrace();
       }

Когда мы ищем человека, было бы здорово, если совпадало с именем человека. Например если ввести Бибар
вышли бы все результаты Бибарыс, Бибарррыс и т.д. По этому мы будем искать все схожие результаты.
В postgres существует такой механизм, нужно прописать %Бибар% и тогда выйдут все схожие результаты.
Но существует одна проблема, а вдруг буквы будут разными? Что будет, если кто то прошишет свое имя с
большими буквами? Ведь в sql нижний и верхний регистр имеет большое отличие. Бибарыс != БИБАРЫС != бибарыс
!= БиБаРыС. По этой причине мы должны привести все буквы в один регистр. Для этого существует команда
UPPER()

private static final String GET_PERSON = "SELECT * FROM person " +
           "WHERE UPPER(person_name) LIKE UPPER(?);";

private static final - это константа в Java.


Теперь давайте запустим тестовый вариант ProgramTester - Все отлично работает !!!
На этом первый этап пройден. БД подключена и накидали первый набросок на проект.


Отчет изменении.

Added Maven and dependencies;

Создан класс Person
Создана база данных
Создана таблица Person
Прописан в pom.xml драйвер jdbc
Создан интерфейс PersonDao
Создан класс PersonDaoImpl имплементирующий PersonDao
Создан ConnectBuilder

Тест на работоспособность подключения к БД.


#2 Создание SQL запросов

И так, давайте расширать функционал нашей программы.

Что я хочу сделать ? Давайте представим, как мы будем искать человека.
Для начало нам нужно хоть что то знать об этом человеке: Имя, фамилия, отчество, пол,
адресс, номер или почта.

Нам нужно знать хотя бы почту человека, чтобы найти его.

Далее нужно было расширить фуекционал DAO. Добавили сложные запросы(ушло более 5 часов!!!)
и внешний ключ. Запрос должен быть таким, чтобы адресс был не обязатеьным. Вдруг этот человек
потерял дом или случилось что то несчастное ?

Хоть и тут было мало изменении, но на освоение, изучение и поптыки написать OUTER join ушел везь день

Итог: Мы можем прописать Имя или Фамилию человека, и он его найдет. 

Отчет изменении.
Расширили класс Person: добавили отчество, дата рождения, пол, адресс, телефонный номер
и почта.

Добавил класс Адресс, который содержит: страну, город, улицу, дом и квартиру.






